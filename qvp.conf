#####################################FWConfiguration ##############################################
# Ths section holds necessary configuration to setup firmware related information
# path to axf file in reference to top dir ( top of git dir )
# axf path is relative path from QVP folder (which is TOP)
# example: axf_path = "Build/Host/OUTPUT_BINARIES/"
# allowed reggular expression or variable, which can be evaluated by passing command args during launch
axf_path="../Build/HIL/Debug_TLC"

# Total valid cores
ncores=7

# set core enable or disable ( allowed options on|off)
core_0_en=on
core_1_en=on
core_2_en=on
core_3_en=on
core_4_en=on
core_5_en=on
core_6_en=on

# Default boot core ( Reset will be released to this core )
boot_core_id=0

# Specify compiled axf file for each core, this can contain regular expression
# or variable, which can be evaluated by passing command args during launch
# below example $target can be FPGA or SOC
core_0="Core0_Fpga.axf"
core_1="Core1_Fpga.axf"
core_2="Core2_Fpga.axf"
core_3="Core3_Fpga.axf"

core_4="../../../Tools/QVP/unitFW/rom_eldora_fcpu0.axf"
core_5="../../../Tools/QVP/unitFW/rom_eldora_cmcore0.axf"
core_6="../../../Tools/QVP/unitFW/rom_eldora_cmcore1.axf"

# Stop on entry or main, if set CPU will halt at entry point
# If you "off" this option, QVP automatically boot after launch.
# If you "on" this option, QVP wait for your T32 trigger (all GO for CPUs), and if all GO is done,
# QVP starts booting.
# So, in case of booting issue, 'on' option will be more helpful to check T32 attach.
stop_on_entry=off

#FW Debugging Port ( ports will be assigned from core-0~n ( 1110~ncores))
starting_port=1110

# set soc_build  true to enable it  else false to disable
soc_build=off

#set product fw header image path and loader address
is_load_header=true
headerImage=$TOP/../Build/OneBinary/Binary/Eldora_Image_Header.bin

#####################################Features##############################################
mi_enable=off
slave_addr=0x1D
master_addr=0x08

##########################################BootMode###################################################
# Set this to true, to enable boot rom mode & enable booting from bootrom axf
bootrom_mode=false
# Bootrom axf and loader address
bootrom_axf=""
bootrom_addr=0x0

#####################################Guest OS##############################################
# @section GuestOS configuration
# Provide size of RAM for GuestOS ( recommended 2G MIN,
# MAX 4G, due to limitation in controller )
ram=4G
# Number of CPU cores for Guest OS ( Higher number for
# better performance )
cpu=4

#When using Minimal rootfs as guest image, set below flag to true
rootfs=true
#Linux Kernel image, valid when rootfs is set to true
kernel="/opt/os/linux/bzImage"

#Guest OS image path / rootfs file system image
# os_img="/opt/os/ubuntu.qcow2"
os_img="/opt/os/linux/rootfs.qcow2"

#NVME virtual disk path
#one can create disk using qemu-img under qemu\bin
# '$qemu_img create nvme.qcow 1G'
nvme_img="/opt/os/nvme.img"

# time unit - second
# cmd_timeout on/off from host side
# on: if cmd is not processed within $set_time, host send abort
# off: if cmd is not processed, host doesn't send abort
cmd_timeout=off
set_time=300

# Host UUID
# format: 8-4-4-4-12, last 2 digits will be supplied by user or default to '00'
UUID="babebeef-0000-0000-0000-0000000000"

#####################################Log##############################################
# Log Level Information
# 0 = log off
# 1 = only errors
# 2 = info, warnings, errors
# 3 = all log levels enabled
# use log level 1 for better performance

logrotate="false"

# host log levels : controls PCI and MMIO Read, Write logs, visible on host terminal
host_log_level=2

# ctrl log levels : controls NvmeController and IP's (interrupts, fetcher, dma, etc) logging
# colorful logs, which are visible on ctrl terminal
ctrl_log_level=3

# gaudi log levels : controls GaudiController and IP's (CM, QIF, QCC, BA, etc) logging
gaudi_log_level=3

# set err_injection  true to enable it  else false to disable
err_injection=false

# Trace buffer log levels : controls core logs, host logs which are visible on ctrl terminal and respective files
# 0 = only terminal
# 1 = only file
# 2 = both (terminal, file)
trace_log_level=2

#####################################Plugin##############################################
# allowed options on|off
# run code coverage for firmware code
coverage=off

# Heatmap plugin - set true to enable
heatmap=off

#sfr coverage - set true to enable
sfr_coverage=off

# sfr RO access violation check - set true to enable verification for FW sfr writes
sfr_access=off

#####################################SWAT_ctests##############################################
# allowed options on|off
# swat enable/ disable
swat=off


#####################################QVP(internal)##############################################
# Write allocate DRAM, set this feature on, if your system
# has limited RAM, this approach ensures DRAM region is not
# allocated completly upfront, rather take lazy allocation
# approach, allocate when Write to DRAM region occurs, blocked
# are allocated unit of 10MB
wa_dram=off
